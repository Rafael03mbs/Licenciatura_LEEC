/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class SplitterConveyor */

#ifndef _Included_SplitterConveyor
#define _Included_SplitterConveyor
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     SplitterConveyor
 * Method:    initializeHardwarePorts
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_initializeHardwarePorts
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1MoveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1MoveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1MoveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1MoveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1Stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder1Stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder1GetPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinder1GetPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStartMoveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStartMoveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStartStop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStartStop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStartGetPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinderStartGetPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_setPosition
 * Signature: (I)V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStart_1setPosition
  (JNIEnv *, jclass, jint);

/*
 * Class:     SplitterConveyor
 * Method:    cylinderStart_moveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinderStart_1moveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2MoveForward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2MoveForward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2MoveBackward
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2MoveBackward
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2Stop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_cylinder2Stop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    cylinder2GetPosition
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_cylinder2GetPosition
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyorMove
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyorMove
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    conveyorStop
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_conveyorStop
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    getIdentificationSensors
 * Signature: ()I
 */
JNIEXPORT jint JNICALL Java_SplitterConveyor_getIdentificationSensors
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isBoxAtDock1
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isBoxAtDock1
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isBoxAtDock2
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isBoxAtDock2
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    isBoxAtDockEnd
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_isBoxAtDockEnd
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    LED_ON
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_LED_1ON
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    LED_OFF
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_LED_1OFF
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    Dock1LED_ON
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_Dock1LED_1ON
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    Dock1LED_OFF
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_Dock1LED_1OFF
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    Dock2LED_ON
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_Dock2LED_1ON
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    Dock2LED_OFF
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_Dock2LED_1OFF
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    DockEndLED_ON
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_DockEndLED_1ON
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    DockEndLED_OFF
 * Signature: ()V
 */
JNIEXPORT void JNICALL Java_SplitterConveyor_DockEndLED_1OFF
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    Dock1_fechou
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_Dock1_1fechou
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    Dock2_fechou
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_Dock2_1fechou
  (JNIEnv *, jclass);

/*
 * Class:     SplitterConveyor
 * Method:    ambosBotoesPressionados
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_SplitterConveyor_ambosBotoesPressionados
  (JNIEnv *, jclass);

#ifdef __cplusplus
}
#endif
#endif
